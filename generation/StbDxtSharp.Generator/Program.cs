using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Sichem;

namespace StbSharp.StbImage.Generator
{
	class Program
	{
		private static void Write(Dictionary<string, string> input, StringBuilder output)
		{
			foreach (var pair in input)
			{
				output.Append(pair.Value);
			}
		}

		private static string PostProcess(string data)
		{
			data = Utility.ReplaceNativeCalls(data);

			data = data.Replace("byte* minp;", "byte* minp = null;");
			data = data.Replace("byte* maxp;", "byte* maxp = null;");
			data = data.Replace("public static void stb__PrepareOptTable(byte* Table, byte* expand, int size)",
				"public static void stb__PrepareOptTable(byte[] Table, byte[] expand, int size)");

			return data;
		}

		static void Process()
		{
			var parameters = new ConversionParameters
			{
				InputPath = @"stb_dxt.h",
				Defines = new[]
				{
					"STB_DXT_IMPLEMENTATION"
				},
				Namespace = "StbSharp",
				Class = "StbDxt",
				SkipStructs = new string[]
				{
				},
				SkipGlobalVariables = new string[]
				{
				},
				SkipFunctions = new[]
				{
					"stb__DitherBlock"
				},
				Classes = new string[]
				{
				},
				GlobalArrays = new[]
				{
					"stb__Expand5",
					"stb__Expand6",
					"stb__OMatch5",
					"stb__OMatch6",
					"stb__QuantRBTab",
					"stb__QuantGTab"
				}
			};

			var cp = new ClangParser();

			var result = cp.Process(parameters);

			// Write output
			var sb = new StringBuilder();
			sb.AppendLine(string.Format("// Generated by Sichem at {0}", DateTime.Now));
			sb.AppendLine();

			sb.AppendLine("using System;");
			sb.AppendLine("using System.Runtime.InteropServices;");

			sb.AppendLine();

			sb.Append("namespace StbDxtSharp\n{\n\t");
			sb.AppendLine("unsafe partial class StbDxt\n\t{");

			Write(result.Constants, sb);
			Write(result.GlobalVariables, sb);
			Write(result.Enums, sb);
			Write(result.Structs, sb);
			Write(result.Methods, sb);

			sb.Append("}\n}");
			var data = sb.ToString();

			// Post processing
			Logger.Info("Post processing...");
			data = PostProcess(data);

			File.WriteAllText(@"..\..\..\..\..\src\StbDxt.Generated.cs", data);
		}

		static void Main(string[] args)
		{
			try
			{
				Process();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
			Console.ReadKey();
		}
	}
}